# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lFh_iZKRFo3Cz4yV7KuEJQXdRe0kwJp5
"""

import pandas as pd
import numpy as  np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/iris.csv')
df.head()

df['species'].unique()

sns.pairplot(df)

df['classes'] = df['species'].map({'setosa':0,'versicolor':1,'virginica':2})

df.head(2)

dummies = pd.get_dummies(df['species'])
df = pd.concat([df.drop('species',axis=1),dummies],axis=1)

df.head(2)

X = np.array(df.drop(['classes','setosa','versicolor','virginica'],axis=1))
y = np.array(df[['setosa','versicolor','virginica']])

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
...     X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from keras.layers import Dropout,Dense

model = Sequential()


model.add(Dense(4,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(12,activation='tanh'))
model.add(Dropout(0.3))
model.add(Dense(16,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(20,activation='tanh'))
model.add(Dropout(0.2))
model.add(Dense(16,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(20,activation='tanh'))
model.add(Dropout(0.7))
model.add(Dense(3,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy')

model.fit(X_train,y_train,epochs=500,validation_data=(X_test,y_test))

losses = pd.DataFrame(model.history.history)
losses.plot()

ynew = np.array(df['classes'])

X_train, X_test, y_train, y_testnew = train_test_split(X, ynew, test_size=0.2, random_state=42)

predictions = model.predict_classes(X_test)

prd = pd.DataFrame(y_testnew,columns=['Actual'])

prd['predicted'] = predictions

prd.head()

from sklearn.metrics import*

print(classification_report(prd['Actual'],prd['predicted']))

confusion_matrix(y_testnew,predictions)

